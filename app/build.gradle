plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-parcelize'
    id 'androidx.navigation.safeargs.kotlin'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
    id 'com.google.firebase.firebase-perf'
    id 'io.gitlab.arturbosch.detekt' version '1.17.0'
    id 'kotlin-kapt'
    id 'com.google.android.gms.oss-licenses-plugin'
    id 'dagger.hilt.android.plugin'
    id 'jacoco'
}

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.theuhooi.uhooipicbook"
        minSdkVersion 26
        targetSdkVersion 30
        versionCode 6
        versionName "1.5.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        // For LeakCanary in instrumentation tests
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        testInstrumentationRunnerArgument "listener", "leakcanary.FailTestOnLeakRunListener"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["dagger.hilt.android.useFragmentGetContextFix": "true"]
            }
        }
    }

    signingConfigs {
        release {
            storeFile file("release.keystore")
            storePassword System.getenv("RELEASE_KEYSTORE_STORE_PASSWORD")
            keyAlias "uhooipicbook"
            keyPassword System.getenv("RELEASE_KEYSTORE_KEY_PASSWORD")
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    kotlinOptions {
        jvmTarget = '1.8'
    }

    testOptions {
        unitTests {
            includeAndroidResources = true
        }
    }

    buildFeatures {
        dataBinding true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    flavorDimensions 'environment'
    productFlavors {
//        production {
//            dimension 'environment'
//        }
        develop {
            dimension 'environment'
            applicationIdSuffix '.develop'
            versionNameSuffix '-develop'
        }
    }
}

dependencies {
    def coil_version = '1.1.1'
    implementation "io.coil-kt:coil:$coil_version"
    implementation "io.coil-kt:coil-base:$coil_version"
    implementation "io.coil-kt:coil-gif:$coil_version"

    // Firebase
    implementation platform('com.google.firebase:firebase-bom:28.3.0')
    implementation 'com.google.firebase:firebase-analytics-ktx'
    implementation 'com.google.firebase:firebase-crashlytics-ktx'
    implementation 'com.google.firebase:firebase-firestore-ktx'
    implementation 'com.google.firebase:firebase-messaging'
    implementation 'com.google.firebase:firebase-perf'

    implementation 'androidx.recyclerview:recyclerview:1.2.1'

    implementation "androidx.navigation:navigation-fragment-ktx:$nav_version"
    implementation "androidx.navigation:navigation-ui-ktx:$nav_version"

    implementation 'androidx.lifecycle:lifecycle-extensions:2.2.0'
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.3.1'

    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.3.1'
    implementation 'androidx.core:core-ktx:1.6.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.0'

    implementation 'com.google.android.material:material:1.4.0'

    // Hilt
    implementation "com.google.dagger:hilt-android:$rootProject.hilt_version"
    kapt "com.google.dagger:hilt-android-compiler:$rootProject.hilt_version"
    implementation 'androidx.hilt:hilt-navigation-fragment:1.0.0'

    implementation "com.google.android.gms:play-services-oss-licenses:17.0.0"

    implementation 'com.jakewharton.timber:timber:4.7.1'

    testImplementation 'org.robolectric:robolectric:4.6.1'
    testImplementation 'androidx.test:runner:1.4.0'
    testImplementation "androidx.test.ext:junit:1.1.3"

    // LeakCanary
    def leakcanary_version = '2.7'
    debugImplementation "com.squareup.leakcanary:leakcanary-android:$leakcanary_version"
    androidTestImplementation "com.squareup.leakcanary:leakcanary-android-instrumentation:$leakcanary_version"
}

kapt {
    correctErrorTypes = true
}

hilt {
    enableAggregatingTask = true
}

detekt {
    buildUponDefaultConfig = true
    allRules = false
    config = files("$projectDir/config/detekt/detekt.yml")
    baseline = file("$projectDir/config/detekt/baseline.xml")
    reports {
        xml {
            enabled = true
            destination = file("$buildDir/reports/detekt/detekt.xml")
        }
        html {
            enabled = true
            destination = file("$buildDir/reports/detekt/detekt.html")
        }
        txt {
            enabled = true
            destination = file("$buildDir/reports/detekt/detekt.txt")
        }
        sarif {
            enabled = true
            destination = file("$buildDir/reports/detekt/detekt.sarif")
        }
    }
}

jacoco {
    toolVersion = "0.8.7"
}

task jacocoDevelopDebugTestReport(type: JacocoReport, dependsOn: 'testDevelopDebugUnitTest', group: 'verification') {
    def excludedClasses = []
    sourceDirectories.from("$projectDir/src/main/java")
    classDirectories.from(fileTree(
            dir: "$buildDir/tmp/kotlin-classes/developDebug",
            excludes: excludedClasses
    ))
    executionData.from("$buildDir/jacoco/testDevelopDebugUnitTest.exec")
}

jacocoDevelopDebugTestReport {
    reports {
        xml {
            enabled = true
            destination = file("$buildDir/reports/jacoco/jacoco.xml")
        }
        csv {
            enabled = false
            destination = file("$buildDir/reports/jacoco/jacoco.csv")
        }
        html {
            enabled = true
            destination = file("$buildDir/reports/jacoco/html")
        }
    }
}
